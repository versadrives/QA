name: Build, Test, and Release Windows EXE
on:
  push:
    branches: [main, master]
  workflow_dispatch:
  release:
    types: [created]  # Trigger release job on tag creation

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pytest
        
    - name: Debug directory structure
      run: |
        echo "Current directory: $(pwd)"
        dir
        if (Test-Path tests) { dir tests }
        
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$(pwd)" >> $env:GITHUB_ENV
      
    - name: Create mock RS485 module for testing
      run: |
        echo "def get_live_power_and_factor_and_rpm():" > rs485_reader.py
        echo "    return 100.0, 0.85, 1450" >> rs485_reader.py
        echo "    # Mock function for testing" >> rs485_reader.py
        
    - name: Run tests (if test directory exists)
      run: |
        if (Test-Path tests) {
          pytest tests/
        } else {
          echo "No tests directory found, skipping tests"
        }
        
    - name: Create comprehensive PyInstaller hook
      run: |
        @"
        from PyInstaller.utils.hooks import collect_submodules, collect_data_files
        
        # Collect all eventlet submodules
        hiddenimports = [
            'eventlet.hubs.epolls',
            'eventlet.hubs.kqueue', 
            'eventlet.hubs.poll',
            'eventlet.hubs.selects',
            'eventlet.wsgi',
            'eventlet.green',
            'eventlet.green.socket',
            'eventlet.green.threading',
            'eventlet.green.time',
            'eventlet.green.select',
            'eventlet.green.subprocess',
            'eventlet.green.ssl',
            'eventlet.green.httplib',
            'dns.asyncquery',
            'dns.asyncbackend',
            'dns.asyncresolver',
            'dns.dnssec',
            'dns.e164',
            'dns.namedict',
            'dns.tsigkeyring',
            'dns.rdtypes.ANY',
            'dns.rdtypes.CH',
            'dns.rdtypes.IN',
            'dns.rdtypes.MAIL',
            'dns.rdtypes.RP',
            'dns.rdtypes.OTHER',
            'dns.rdtypes.dnskeybase',
            'dns.message',
            'dns.name',
            'dns.rdatatype',
            'dns.rdataclass',
            'dns.exception',
            'dns.flags',
            'dns.opcode',
            'dns.rcode',
            'dns.rrset',
            'dns.resolver',
            'dns.zone',
            'dns.query',
            'dns.reversename',
            'dns.version',
            'dns.xfr',
            'dns.update',
            'dns.tsig',
            'dns.ttl',
            'dns.wire',
            'dns.grange',
            'dns.node',
            'sqlite3',
            'openpyxl',
            'openpyxl.styles'
        ]
        
        # Add additional eventlet modules
        hiddenimports += collect_submodules('eventlet')
        "@  | Out-File -FilePath hook-eventlet.py -Encoding utf8
        
    - name: Create empty database for bundling
      run: |
        python -c "
        import sqlite3
        conn = sqlite3.connect('scan_log.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS scans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            daily_number INTEGER NOT NULL,
            qr_code TEXT NOT NULL,
            power REAL NOT NULL,
            rpm INTEGER NOT NULL,
            power_factor REAL NOT NULL,
            failure_code TEXT NOT NULL,
            status TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            result TEXT DEFAULT 'FP OK',
            voice_recognition TEXT DEFAULT 'NA'
        )''')
        c.execute('''CREATE TABLE IF NOT EXISTS models (
            model_prefix TEXT PRIMARY KEY,
            power_min REAL,
            power_max REAL,
            pf_min REAL,
            rpm_min INTEGER,
            rpm_max INTEGER
        )''')
        c.execute('''CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT
        )''')
        c.execute('''INSERT OR IGNORE INTO settings (key, value) VALUES ('default_voice_recognition', 'NA')''')
        conn.commit()
        conn.close()
        print('Database created successfully')
        "
        
    - name: Test application before building
      run: |
        echo "Testing application startup..."
        timeout 30 python app.py > app_test.log 2>&1 &
        Start-Sleep -Seconds 10
        Get-Process python -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
        if (Test-Path app_test.log) {
          echo "=== Application Test Log ==="
          Get-Content app_test.log
        }
        
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --additional-hooks-dir=. `
                   --name QA_Testing_App `
                   --onefile `
                   --noconsole `
                   --add-data "scan_log.db;." `
                   --add-data "templates;templates" `
                   --add-data "static;static" `
                   --hidden-import=sqlite3 `
                   --hidden-import=openpyxl `
                   --hidden-import=openpyxl.styles `
                   --hidden-import=eventlet `
                   --hidden-import=flask_socketio `
                   --collect-all eventlet `
                   --collect-all flask_socketio `
                   app.py
                   
    - name: List build output
      run: |
        echo "=== Build directory contents ==="
        if (Test-Path dist) { 
          dir dist 
        } else {
          echo "No dist directory found"
        }
        if (Test-Path build) { 
          echo "=== Build logs ==="
          dir build
        }
        
    - name: Create test script for executable
      run: |
        @"
        import subprocess
        import sys
        import time
        import os
        
        # Test if executable exists
        exe_path = r'.\dist\QA_Testing_App.exe'
        if not os.path.exists(exe_path):
            print(f'ERROR: Executable not found at {exe_path}')
            sys.exit(1)
            
        print(f'Found executable: {exe_path}')
        print(f'File size: {os.path.getsize(exe_path)} bytes')
        
        # Try to run the executable for a short time
        try:
            print('Starting executable test...')
            process = subprocess.Popen([exe_path], 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE,
                                     creationflags=subprocess.CREATE_NEW_CONSOLE)
            
            # Let it run for a few seconds
            time.sleep(5)
            
            # Terminate the process
            process.terminate()
            process.wait(timeout=5)
            
            print('Executable test completed successfully')
            
        except Exception as e:
            print(f'Error testing executable: {e}')
            # Don't fail the build for this
            
        print('Smoke test completed')
        "@  | Out-File -FilePath test_exe.py -Encoding utf8
        
    - name: Smoke test executable
      run: python test_exe.py
      continue-on-error: true
      
    - name: Upload EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: QA_Testing_App
        path: dist/QA_Testing_App.exe
        
    - name: Upload build logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          build/
          *.log
          *.spec

  release:
    runs-on: windows-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download EXE artifact
      uses: actions/download-artifact@v4
      with:
        name: QA_Testing_App
        path: ./artifact
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifact/QA_Testing_App.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
