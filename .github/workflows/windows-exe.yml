name: Build, Test, and Release Windows EXE
on:
  push:
    branches: [main, master]
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pytest
        
    - name: Debug directory structure
      run: |
        echo "Current directory: $(pwd)"
        dir
        if (Test-Path tests) { dir tests }
        
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$(pwd)" >> $env:GITHUB_ENV
      
    - name: Run tests (if available)
      run: |
        if (Test-Path tests) {
          pytest tests/ -v
        } else {
          echo "No tests directory found, skipping tests"
        }
      continue-on-error: true
        
    - name: Create PyInstaller spec file
      run: |
        @"
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        import os
        from PyInstaller.utils.hooks import collect_data_files, collect_submodules

        block_cipher = None

        # Collect all template and static files
        datas = []
        if os.path.exists('templates'):
            datas.extend(collect_data_files('.', include_py_files=False, subdir='templates'))
        if os.path.exists('static'):
            datas.extend(collect_data_files('.', include_py_files=False, subdir='static'))
        if os.path.exists('scan_log.db'):
            datas.append(('scan_log.db', '.'))

        # Collect Flask-SocketIO and eventlet modules
        hiddenimports = []
        hiddenimports.extend(collect_submodules('flask_socketio'))
        hiddenimports.extend(collect_submodules('socketio'))
        hiddenimports.extend(collect_submodules('engineio'))
        hiddenimports.extend(['openpyxl', 'openpyxl.styles', 'threading'])

        a = Analysis(
            ['app.py'],
            pathex=['.'],
            binaries=[],
            datas=datas,
            hiddenimports=hiddenimports,
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='ScanLogApp',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        "@ | Out-File -FilePath "app.spec" -Encoding utf8
        
    - name: Build executable with PyInstaller
      run: |
        pyinstaller app.spec --clean --noconfirm
        
    - name: Verify build output
      run: |
        echo "Contents of dist directory:"
        if (Test-Path dist) { 
          dir dist -Recurse 
        } else { 
          echo "dist directory not found!" 
          exit 1
        }
        
    - name: Test executable
      run: |
        if (Test-Path "dist/ScanLogApp.exe") {
          echo "Executable found: dist/ScanLogApp.exe"
          # Quick test - just check if it starts (timeout after 5 seconds)
          Start-Process -FilePath "dist/ScanLogApp.exe" -PassThru | ForEach-Object { 
            Start-Sleep 5; 
            if (!$_.HasExited) { 
              $_.Kill() 
              echo "Executable started successfully and was terminated"
            }
          }
        } else {
          echo "Executable not found!"
          exit 1
        }
        
    - name: Create release package
      run: |
        # Create a release directory
        New-Item -ItemType Directory -Path "release" -Force
        
        # Copy the executable
        Copy-Item "dist/ScanLogApp.exe" "release/"
        
        # Create README for the release
        @"
        # ScanLog Application
        
        ## Installation
        1. Download the ScanLogApp.exe file
        2. Run the executable directly - no installation required
        
        ## Usage
        1. Double-click ScanLogApp.exe to start the application
        2. The application will start a web server on port 5000
        3. Open your browser and go to http://localhost:5000
        
        ## Requirements
        - Windows 10 or later
        - No additional software installation required
        
        ## Features
        - QR code scanning and logging
        - Real-time power monitoring via RS485
        - Excel export functionality  
        - Web-based dashboard
        
        Built on: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
        Python Version: 3.11
        "@ | Out-File -FilePath "release/README.txt" -Encoding utf8
        
        # Show what we're packaging
        echo "Release package contents:"
        dir release
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ScanLogApp-Windows-${{ github.sha }}
        path: release/
        retention-days: 30
        
    - name: Create ZIP for release
      run: |
        Compress-Archive -Path "release/*" -DestinationPath "ScanLogApp-Windows.zip"
        
    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ScanLogApp-Windows-ZIP
        path: ScanLogApp-Windows.zip
        retention-days: 90
        
    # Only run this step on releases
    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ScanLogApp-Windows.zip
        asset_name: ScanLogApp-Windows-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip
